#!/bin/bash
# scoring_loop by David Weinman <david@weinman.com>

# This file is licensed under The DO WHAT THE FUCK YOU WANT TO License, see LICENSE for details.

FIRST_CWD=$(pwd)
SCOREDIRNAME="scoring_$(date +%m_%d__%H_%M)"
mkdir $SCOREDIRNAME
cd $SCOREDIRNAME

touch /tmp/calc_in_out
INPT_OUTPT_FILE="/tmp/calc_in_out"
ERRLOG="./scoring_errlog.txt"
LINES_READ_IN_OUT="$(wc -l $INPT_OUTPT_FILE | awk '{print $(NF - 1)}')"

while [ 0 ]; do

  # if the number of lines read so far is unequal to the number of lines currently in the input output file
  if [ $LINES_READ_IN_OUT != "$(wc -l $INPT_OUTPT_FILE | awk '{print $(NF - 1)}')" ]; then

    LINES_READ_IN_OUT=$(expr $LINES_READ_IN_OUT + 1)
    # check if the scorebot has been signaled to stop
    if [ "$(sed -n "$LINES_READ_IN_OUT p" $INPT_OUTPT_FILE)" == "game completed" ]; then

      cleanup
      exit

    fi

    # parse input to calc out of the last line in 'input output pair' file
    MOST_RECENT_LINE="$(sed -n "$LINES_READ_IN_OUT p" $INPT_OUTPT_FILE)"

    # get output and input on last line
    INPUT="$(echo "$MOST_RECENT_LINE" | awk -F: '{print $(NF - 2)}')"
    OUTPUT="$(echo "$MOST_RECENT_LINE" | awk -F: '{print $(NF)}')"

    # run input on refcalc and collect output
    REFCALC_OUTPUT="$(echo "$INPUT" | /usr/bin/refcalc/calc 2> refcalc_stderr.txt)"
    REFCALC_STDERR="$(cat refcalc_stderr.txt)"

    # find out what the points are currently, if there isn't any points in
    # /tmp/scoring/answers then assign zero to each team, if there is then get
    # the most current points acquired 
    if [ "0" == "$(wc -l /tmp/scoring/answers | awk '{print $(NF - 1)}')" ]; then
        DEFENDING_PTS="0"
        ATTACKING_PTS="0"
    else
        DEFENDING_PTS="$(tail --lines=1 /tmp/scoring/answers | awk '{print $(NF - 5)}')"
        ATTACKING_PTS="$(tail --lines=1 /tmp/scoring/answers | awk '{print $(NF)}')"
    fi

    NOW=$(date +%m-%d--%H:%M:%S)
    # if the refcalc output and the given output are the same, award appropriate points
    if [ $(equal "$REFCALC_OUTPUT" "$OUTPUT" 2> $ERRLOG) == "True" ]; then

    # defending team gets points and attacking team gets no points
      DEFENDING_PTS="$(echo "$DEFENDING_PTS + 10" | /usr/bin/refcalc/calc)"
      echo "$NOW:(INPUT: $INPUT, OUTPUT: $OUTPUT) : DEFENDING TEAM'S POINTS = $DEFENDING_PTS ATTACKING TEAM'S POINTS = $ATTACKING_PTS" >> /tmp/scoring/answers

    # else if both the refcalc and the defending team gave errors, defending team gets pts
    elif [[ ( "$REFCALC_STDERR" != "" ) && $(echo "$OUTPUT" | grep -q -i 'error') ]]; then

    # defending team gets points and attacking team gets no points
      DEFENDING_PTS="$(echo "$DEFENDING_PTS + 10" | /usr/bin/refcalc/calc)"
      echo "$NOW:(INPUT: $INPUT, OUTPUT: $OUTPUT) : DEFENDING TEAM'S POINTS = $DEFENDING_PTS ATTACKING TEAM'S POINTS = $ATTACKING_PTS" >> /tmp/scoring/answers

    # else if the given output is a crash
    elif [ "$(echo $MOST_RECENT_LINE | awk -F: '{print $(NF - 1)}')" == "1" ]; then

      # attacking team gets 50pts
      ATTACKING_PTS="$(echo "$ATTACKING_PTS + 50" | /usr/bin/refcalc/calc)"
      echo "$NOW:(INPUT: $INPUT, OUTPUT: $OUTPUT) : DEFENDING TEAM'S POINTS = $DEFENDING_PTS ATTACKING TEAM'S POINTS = $ATTACKING_PTS" >> /tmp/scoring/answers

    # else if the refcalc output and the defending team's output are unequal, award appropriate points
    elif [[ $(equal "$OUTPUT" "$REFCALC_OUTPUT" 2> $ERRLOG) == "False" || "" == $OUTPUT ]]; then


      # defending team gets no points and attacking team gets 10 pts
      ATTACKING_PTS="$(echo "$ATTACKING_PTS + 10" | /usr/bin/refcalc/calc)"
      echo "$NOW:(INPUT: $INPUT, OUTPUT: $OUTPUT) : DEFENDING TEAM'S POINTS = $DEFENDING_PTS ATTACKING TEAM'S POINTS = $ATTACKING_PTS" >> /tmp/scoring/answers

    fi

    # delete all blank lines in /tmp/calc_in_out
    sed '/^$/d' $INPT_OUTPT_FILE > ./tmp.txt
    mv ./tmp.txt $INPT_OUTPT_FILE
    # reset current time
    NOW=""

  else

    sleep 2

  fi

done

SRVR_PID=""
cd $FIRST_CWD



