#!/bin/bash
# get_attacker_input by David Weinman <david@weinman.com>

# This file is licensed under The DO WHAT THE FUCK YOU WANT TO License, see LICENSE for details.

# if the given arument count isn't equal to two then the script isn't being used correctly
# 		-> print usage and exit
if [ ! $# -eq 1 ]; then

  echo "Usage: get_attacker_input calc

calc: path to calculator executable
lmodtime: last time record was modified
"
  exit

fi

cleanup() {

  rm gdb_script_front gdb_script_back run_calc_gdb_script.py.gdb input_file.txt

}

# make files for sandboxing of calculator and input
echo "## run_calc_gdb_script.py.gdb ##

" > gdb_script_front

echo "if myout.count(\"normally\") == 1:
  pass
else:
  wordlist = myout.split(\" \")
  for i, j in enumerate(wordlist):
    if j.find(\"0x\") != -1:
      print(wordlist[i])
end

q
" > gdb_script_back

CALC_EXEC="$1" # calc exec filename
rm /tmp/calc_in_out
touch /tmp/calc_in_out
LASTLINEREAD="$(wc -l /tmp/calc_in_out | awk '{print $(NF - 1)}')" # last line read in recordfile 
RECORDFILE="/tmp/calc_in_out"
DEFENDING_LOG_FILE="/tmp/timestamped_fuzz_log.txt"
DEFENDING_RECORD_FILE="/tmp/fuzz_record.txt"
SCORING_HOST="10.0.26.128"
ATTACKING_HOST="10.0.26.129"

# while (true):
#  check if /tmp/calc_in_out was modified and went unchecked
#  if true, run the new input in gdb on the calc executable
#  send output, error or some possibly incorrect output to
#  the scorebot to get checked out, and log to attacking and
#  defending machines.
while [ 0 ]; do

  # if the number of lines read so far is not equal to the total count of lines in the recordfile
  if [ "$(equal $LASTLINEREAD "$(wc -l $RECORDFILE | awk '{print $(NF - 1)}')")" != "True" ]; then

    # check if the script has been signaled to stop
    if [ "$(tail --lines=1 $RECORDFILE)" == "stop getting attacker input"  ]; then
  
      cleanup
      echo "game completed" | nc $SCORING_HOST 3456
      exit
  
    fi

    # check for doubles - if the attacking team is trying things twice, just ignore the input.
    if [ $(doubles_s_and_r $RECORDFILE) == "True"  ]; then

      echo "$(date +%m-%d--%H:%M:%S) - RECIEVED DOUBLE OF FUZZ DATA, IGNORING AND MOVING ON.." | nc $ATTACKING_HOST 2222
      continue

    fi

    # update the last line read variable to the line we currently want to read
    LASTLINEREAD="$(expr $LASTLINEREAD + 1)"
    # grab attacker input
    INPUT="$(sed -n "$LASTLINEREAD p" $RECORDFILE)"

    # --------> create the gdb script and print output to a temporary file <-------------

    # first copy the saved first part of the script to our new script file
    cp gdb_script_front run_calc_gdb_script.py.gdb
    # print to our record file to stamp the output it will soon recieve from the process running in gdb
    echo "\n\n -- record for $(date +%m-%d--%H:%M:%S) with input: $INPUT -- \n" >> $DEFENDING_RECORD_FILE
    # copy our input to a text file which will later be piped into our calc executable in gdb
    echo "$INPUT" > input_file.txt
    # create the middle part to our gdb script and append it to the script file
    echo "file $CALC_EXEC
python
import string
import gdb
import os
myout = gdb.execute(\"run < input_file.txt 1> $DEFENDING_RECORD_FILE 2> $DEFENDING_RECORD_FILE\", False, True)
" >> run_calc_gdb_script.py.gdb
    # append the back side of our script from our saved last part of the script to our new script file
    cat gdb_script_back >> run_calc_gdb_script.py.gdb
    # create a temporary file to recieve the output of our python / gdb script
    TMP_FILE=$(mktemp "./temporary.XXXX")

    # run gdb and pipe the output to our temporary file
    gdb -q -x run_calc_gdb_script.py.gdb >> $TMP_FILE


    # see what the output file contains, i.e. whether calc crashed or not
    # and report accordingly
    if grep -q 'killed' "$TMP_FILE" ; then

      NOW="$(date +%m-%d--%H:%M:%S)"
      grep '0x' "./$TMP_FILE" > /tmp/crash_addr_$NOW.txt
      echo "$INPUT:1:$(cat /tmp/crash_addr_$NOW.txt)" | nc $SCORING_HOST 3456 
      PRETTY_INPUT="$(blacklist_replace "$INPUT")"
      echo "$NOW: fuzz_data: $PRETTY_INPUT :[!!] calculator crashed." | nc $ATTACKING_HOST 2222 
      echo "$NOW: fuzz data: $PRETTY_INPUT : [!!] calculator crashed, crash address: $(cat /tmp/crash_addr_$NOW.txt)." >> $DEFENDING_LOG_FILE
      NOW=""
      rm $TMP_FILE

    else

      rm $TMP_FILE
      NOW="$(date +%m-%d--%H:%M:%S)"
      OUTPUT="$(./$CALC_EXEC < input_file.txt 2> stderror.txt)"
      if [ "$OUTPUT" == "" ]; then
        OUTPUT="$(cat stderror.txt)"
      fi
      echo "$INPUT:0:$OUTPUT" | nc $SCORING_HOST 3456 
      PRETTY_INPUT="$(blacklist_replace "$INPUT")"
      echo "$NOW: fuzz_data: $PRETTY_INPUT : calc_out: $OUTPUT" | nc $ATTACKING_HOST 2222
      echo "$NOW: fuzz_data: $PRETTY_INPUT : calc_out: $OUTPUT" >> $DEFENDING_LOG_FILE
      NOW=""
      OUTPUT=""

    fi

    rm run_calc_gdb_script.py.gdb

 else

   sleep 2

 fi

done


